#!/bin/bash

echo "\
This is a tutorial for reading pext planes using this reader.
The basic flow of it is demonstrated by the simple case of
a single run with no restarts.

Copy the pext files to a directory, and place script like this
in that directory, with pext.py, dictcat.py, and angular.py linked
in the directory as well
"
PFOURR='pext[0-9]\+.p4$'
if [ $(ls | grep $PFOURR | wc -l)  -eq 0 ]; then
  	echo "Well, I see no p4 files! Copy them in here and run this again."
	exit
else PFILES=$(ls | grep $PFOURR)
fi
pych(){
	if [ ! -L $1 ]; then
		echo "Hmm, I don't see $1 or it isn't linked here.
Linking is my shim now so installing these scripts is not required.
Please link it and continue."
		return 1;
	fi;
	return 0;
}
waitforit(){
	if [ ! -z $1 ]; then PROMPT="Press any key to continue (or wait 20 seconds)"; 
	else PROMPT="Any key to continue or wait."
	fi
	read -t20 -n1 -r -p "$PROMPT"
}

pych "pext.py" &&  pych "arrcat.py" && pych "angular.py" || exit 123

echo "\
Essentially, we call the script \"pext.py\" which converts the p4's to
oext files, which are just dictionaries of the data in the p4.

Right now, I'm not smart enough to scan the p4 files. I assume they are 2D,
with x and z dimensions.
"
waitforit 1

for i in $PFILES; do
	echo "
========="
	echo "Calling pext.py with $i";
	echo \$ ./pext.py -rxz $i $i
	./pext.py -rxz $i $i
done;

waitforit
echo "

Now, let's look:
"
ls -la | grep p4.npy
echo "
The generated files (shown here)  are basically structured arrays
of each pext plane's captured particles.
"
waitforit
echo "

One more admonishment. We can concatenate the files by using arrcat.py"
echo \$ ./arrcat.py *.d \>pext.pi
./arrcat.py *.d>pext.pi
echo "
Now, we created a new file
"

ls -la | grep '\(p4.d\|pext.pi\)'

echo "
which essentially contains the particles from all pext planes."

waitforit

echo "

Finally, as a demonstration, I am going to call angular.py on the cat'd file.
This shows a momentum angle vs. energy vs. charge plot. This demonstrates how you
can use the .d and .pi files. Of course, they are plain dictionaries with plain
numpy arrays, so you're free to plot them up in anyway you like.

Exiting the angular.py script will exit this tutorial."
waitforit
echo ""
echo \$ ./angular.py pext.npy
./angular.py pext.npy

if [ $? -ne 0 ]; then
    echo "
It looks like I failed to draw the file. It might be because
you are plotting on a machine without a graphical backend. In
that case, I'll call ./angular.py with the agg backend.

It will save it to out.png"
    ./angular.py --agg  pext.npy out.png
    echo \$ ./angular.py --agg pext.npy out.png
fi;

